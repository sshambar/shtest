#!/bin/bash
# -*- mode: sh; sh-basic-offset: 2; indent-tabs-mode: t; -*-
# vim:set ft=sh sw=2 ts=2:
#
# Test suite for shtest_setup
#
# "Who's testing the testers?"
#                    - Scooter
#
# "It's turtles all the way down..."
#
# shellcheck disable=SC2034
#
ztest::err() {
  printf >&2 '%s\n' "$*"
}

ztest::fail() {
  ztest::err "$*"
  exit 1
}

ztest::rm() {
  local f
  for f in "$@"; do [[ -f $f ]] && command -p rm -f "$f"; done
  return 0
}

ztest::mktemp() {
  command -p mktemp "$@"
}

PATH=/bin:/usr/bin:/usr/local/bin
ZTEST_DIFF=$(command -p -v diff)

[[ -z ${ZTEST_DIFF} ]] && ztest::fail "Unable to find diff"

# don't allow shtest_setup to rely on PATH
# shellcheck disable=SC2123
PATH=''

# shellcheck source=/dev/null
. "../shtest_setup" || ztest::fail "Unable to source shtest_setup"

ZTEST_PREFIX=''
ZTEST_COUNT=0
ZTEST_FAILED=0
ZTEST_LIST=()
ZTEST_ENV=()
ZTEST_EXITLVL=${BASH_SUBSHELL}
ZTEST_OUTPUT=''
ZTEST_TESTFILE=''
ZTEST_TESTFILE2=''

ztest::prefix() { # <prefix>
  ZTEST_PREFIX=${1-}
}

ztest::log_common() { # <id>
  local id=${1-} IFS; unset IFS
  (( ZTEST_COUNT++ )) || :
  [[ ${ZTEST_LIST[*]-} =~ (^| )${id}($| ) ]] &&
    ztest::fail "Duplicate ztest '${id}'"
  ZTEST_LIST+=("${id}")
}

ztest::log_ok() { # <test> <id>
  ztest::log_common "${2-}"
  printf " %-4s OK   | %s\n" "${2-}" "${ZTEST_PREFIX}${1-}"
}

ztest::log_fail() { # <test> <id> [ <reason > | <ref> <actual>
  ztest::log_common "${2-}"
  (( ZTEST_FAILED++ )) || :
  printf " %-4s FAIL | %s\n" "${2-}" "${ZTEST_PREFIX}${1-}"
  if [[ ${3+set} && ${4+set} ]]; then
    if [[ ( $3 =~ $'\n' || $4 =~ $'\n' ) ]]; then
      echo "diff: <should-have> <does-have>"
      "${ZTEST_DIFF}" <(echo "$3") <(echo "$4") || :
    else
      echo "   expected: \"$3\""
      echo "     actual: \"$4\""
    fi
  elif [[ ${3+set} ]]; then
    echo "     reason: \"$3\""
  fi
}

ztest::cmp_test() { # <test> <id> <ref> <actual>
  if [[ ${3-} == "${4-}" ]]; then
    ztest::log_ok "$@"
  else
    ztest::log_fail "$@"
  fi
}

# strip leading/trailing
ztest::strip() { # <var> <text>
  [[ $2 =~ ^[[:space:]]*(.*[^[:space:]])?[[:space:]]*$ ]] || :
  printf -v "$1" "%s" "${BASH_REMATCH[1]-}"
}

ztest::read_var() {
  local _out='' IFS=''
  read -r -d '' "_out" || :
  # strip trailing newline
  printf -v "$1" '%s' "${_out%$'\n'}"
}

ztest::read_arr() {
  local IFS=$'\n'
  read -r -d '' -a "$1" || :
}

ztest::fail_test() { # <test> <id> <ref> <actual> [ <desc> ]
  local name=${1-} id=${2-} nref nout aref=() aout=() tref i IFS=$'\n'

  ztest::read_arr aref <<< "${3-}"
  ztest::read_arr aout <<< "${4-}"

  nref=${#aref[@]} nout=${#aout[@]}

  printf -v tref " %-4s FAIL%s" "${id}" "${5:+ | $5}"
  if (( nout == 0 )); then
    ztest::log_fail "${name}" "${id}" "no output"
  elif [[ ${aout[0]} != "${tref}" ]]; then
    ztest::log_fail "${name}" "${id}" "${tref}"$'\n'"${aref[*]-}" "${aout[*]}"
  elif (( nout != (nref+1) )); then
    ztest::log_fail "${name} (exp $((nref+1)) lines, found ${nout})" \
                    "${id}" "${aref[*]-}" "${aout[*]:1}"
  elif (( nout == 2 )); then
    if [[ ${aref[0]} == "${aout[1]}" ]]; then
      ztest::log_ok "${name}" "${id}"
    else
      ztest::log_fail "${name}" "${id}" "${aref[0]}" "${aout[1]}"
    fi
  else
    for (( i=1; i<=nref; i++ )); do
      [[ ${aref[${i}-1]} == "${aout[${i}]}" ]] || {
        ztest::log_fail "${name}" "${id}" "${aref[*]-}" "${aout[*]:1}"
        break
      }
    done
    (( i > nref )) && ztest::log_ok "${name}" "${id}"
  fi
  return 0
}

ztest::ok_test() { # <test> <id> <out> [ <desc> ]
  local name=${1-} id=${2-} out=() nout tref IFS=$'\n'

  ztest::read_arr out <<< "${3-}"

  nout=${#out[@]}
  printf -v tref " %-4s OK%s" "${id}" "${4:+   | $4}"
  if (( nout == 0 )); then
    ztest::log_fail "${name}" "${id}" "no output"
  elif [[ ${out[0]} != "${tref}" ]]; then
    ztest::log_fail "${name}" "${id}" "${tref}" "${out[*]}"
  else
    ztest::log_ok "${name}" "${id}"
  fi
  return 0
}

ztest::read_file() { # <filename> [ <first-only> ] - sets $out or returns 1
  local IFS=''
  [[ -r "${1-}" ]] || return 1
  { read -r -d "${2:+$'\n'}" out || :; } < "${1-}"
  # if out set, read worked
  [[ ${out+set} == set ]] || return 1
  # strip trailing newline
  out=${out%$'\n'}
  return 0
}

ztest::ok_ftest() { # <test> <id> <filename> [ <desc> ]
  local name=${1-} id=${2-} out
  if ztest::read_file "${3-}"; then
    ztest::ok_test "${name}" "${id}" "${out}" "${4-}"
  else
    ztest::log_fail "${name}" "${id}" "<file unreadable> '${3-}'"
  fi
}

ztest::expect_ok() { # <test> <id> [ <desc> ]
  ztest::ok_ftest "${1-}" "${2-}" "${ZTEST_OUTPUT}" "${3-}"
}

ztest::fail_ftest() { # <test> <id> <ref> <filename> [ <desc> [ <first-only>] ]
  local name=${1-} id=${2-} ref=${3-} out
  if ztest::read_file "${4-}" "${6-}"; then
    ztest::fail_test "${name}" "${id}" "${ref}" "${out}" "${5-}"
  else
    ztest::log_fail "${name}" "${id}" "<file unreadable> '${4-}'"
  fi
}

ztest::expect_fail() { # <test> <id> <ref> [ <desc> [ <first-only> ] ]
  ztest::fail_ftest "${1-}" "${2-}" "${3-}" "${ZTEST_OUTPUT}" "${4-}" "${5-}"
}

ztest::cmp_ftest() { # <test> <id> <ref> <filename> [ <first-only> ]
  local name=${1-} id=${2-} ref=${3-} out
  if ztest::read_file "${4-}" "${5-}"; then
    ztest::cmp_test "${name}" "${id}" "${ref}" "${out}"
  else
    ztest::log_fail "${name}" "${id}" "<file unreadable> '${4-}'"
  fi
}

ztest::expect_output() { # <test> <id> <ref> [ <first-only> ]
  ztest::cmp_ftest "${1-}" "${2-}" "${3-}" "${ZTEST_OUTPUT}" "${4-}"
}

# wrappers for shtest functions with 88 redirect
zwrap::fatal() {
  (shtest::fatal 88>"${ZTEST_OUTPUT}" "$@") || :
}

zwrap::check_result() {
  shtest::check_result 88>"${ZTEST_OUTPUT}" "$@"
}

zwrap::check_value() {
  shtest::check_value 88>"${ZTEST_OUTPUT}" "$@"
}

zwrap::check_var() {
  shtest::check_var 88>"${ZTEST_OUTPUT}" "$@"
}

zwrap::check_array() {
  shtest::check_array 88>"${ZTEST_OUTPUT}" "$@"
}

zwrap::check_file() {
  shtest::check_file 88>"${ZTEST_OUTPUT}" "$@"
}

zwrap::check_reg_files() {
  shtest::check_reg_files 88>"${ZTEST_OUTPUT}" "$@"
}

ztest::fatal_tests() {
  ztest::prefix "shtest::fatal"

  zwrap::fatal
  ztest::expect_output "(<no args>)" X1 "Fatal error, quitting..."

  zwrap::fatal "ztest message"
  ztest::expect_output "(<msg>)" X2 "FATAL: ztest message"
}

ztest::check_result_tests() {
  local ref
  ztest::prefix "shtest::check_result"

  (zwrap::check_result) || :
  # skip backtrace
  ztest::expect_output \
    "(<no args>)" R1 \
    "FATAL: Usage: shtest::check_result <id> <t | f | #> [ <desc> ]" 1

  false || zwrap::check_result R2 t
  ztest::read_var ref <<-EOF
	    expected: <true>
	       found: <false>(1)
	EOF
  ztest::expect_fail "(<false> != t)" R2 "${ref}"

  :; zwrap::check_result R3 f
  ztest::read_var ref <<-EOF
	    expected: <false>
	       found: <true>
	EOF
  ztest::expect_fail "(<true> != f)" R3 "${ref}"

  (exit 3) || zwrap::check_result R4 2
  ztest::read_var ref <<-EOF
	    expected: 2
	       found: 3
	EOF
  ztest::expect_fail "(3 != 2)" R4 "${ref}"

  (exit 2) || zwrap::check_result R5 2
  ztest::expect_ok "(2 == 2)" R5

  (exit 2) || zwrap::check_result R6 f
  ztest::expect_ok "(2 == f)" R6

  :; zwrap::check_result R7 t
  ztest::expect_ok "(<true> == t)" R7
}

ztest::check_value_tests() {
  local val="value a" ref
  ztest::prefix "shtest::check_value"

  (zwrap::check_value) || :
  # skip backtrace
  ztest::expect_output \
    "(<no args>)" V1 \
    "FATAL: Usage: shtest::check_value <id> <varname> [ <value> [ <desc> ] ]" 1

  local unset_var; unset unset_var
  zwrap::check_value V2 "unset_var"
  ztest::expect_fail "(unset_var)" V2 \
		     "      reason: <varname> 'unset_var' is unset"

  zwrap::check_value V3 "bad#name"
  ztest::expect_fail "(bad#name)" V3 \
		     "      reason: <varname> 'bad#name' is unset"

  zwrap::check_value V4 "val" "value b"
  ztest::read_var ref <<-EOF
	    expected: 'value b'
	       found: 'value a'
	EOF
  ztest::expect_fail "(a != b)" V4 "${ref}"

  zwrap::check_value V5 "val" "value a"
  ztest::expect_ok "(a == b)" V5

  local val2="value b"
  zwrap::check_value V6 "val2" "value b"
  ztest::expect_ok "(a == b)" V6
}

ztest::check_var_tests() {
  local var='' ref
  ztest::prefix "shtest::check_var"

  (zwrap::check_var) || :
  # skip backtrace
  ztest::expect_output \
    "(<no args>)" C1 \
    "FATAL: Usage: shtest::check_var <id> [ <value> [ <desc> ] ]" 1

  unset var
  zwrap::check_var C2 "no value"
  ztest::expect_fail "(<unset>)" C2 "      reason: <varname> 'var' is unset"

  var="x value"
  zwrap::check_var C3 "y value"
  ztest::read_var ref <<-EOF
	    expected: 'y value'
	       found: 'x value'
	EOF
  ztest::expect_fail "(a != b)" C3 "${ref}"

  zwrap::check_var C4 "x value"
  ztest::expect_ok "(a == b)" C4

  zwrap::check_var C5 "y value" "my desc"
  ztest::read_var ref <<-EOF
	    expected: 'y value'
	       found: 'x value'
	EOF
  ztest::expect_fail "(a != b)" C5 "${ref}" "my desc"
}

ztest::check_array_tests() {
  local aref=() avar=() ref
  ztest::prefix "shtest::check_array"

  (zwrap::check_array) || :
  # skip backtrace
  ztest::expect_output \
    "(<no args>)" A1 \
    "FATAL: Usage: shtest::check_array <id> <varname> <refname> [ <desc> ]" 1

  zwrap::check_array A2 "bad#name" "bad#ref"
  ztest::expect_ok "(bad#name bad#ref)" A2

  avar=("test 1" "test 2") aref=("test 1" "test 2")
  zwrap::check_array A3 "avar" "aref"
  ztest::expect_ok "(a == b)" A3

  avar=("test 1" "test 2" "test 3")
  zwrap::check_array A4 "avar" "aref"
  ztest::read_var ref <<-EOF
	diff: <expected> <found>
	2a3
	> [2]='test 3'
	EOF
  ztest::expect_fail "(a > b)" A4 "${ref}"

  zwrap::check_array A5 "aref" "avar"
  ztest::read_var ref <<-EOF
	diff: <expected> <found>
	3d2
	< [2]='test 3'
	EOF
  ztest::expect_fail "(a < b)" A5 "${ref}"

  avar=()
  zwrap::check_array A6 "avar" "aref"
  ztest::read_var ref <<-EOF
	diff: <expected> <found>
	1,2c1
	< [0]='test 1'
	< [1]='test 2'
	---
	> 
	EOF
  ztest::expect_fail "('' != b)" A6 "${ref}"

  aref=()
  zwrap::check_array A7 "avar" "aref"
  ztest::expect_ok "('' == '')" A7

  avar=("a value" "b value") aref=("a value" "b diff")
  zwrap::check_array A8 "avar" "aref"
  ztest::read_var ref <<-EOF
	diff: <expected> <found>
	2c2
	< [1]='b diff'
	---
	> [1]='b value'
	EOF
  ztest::expect_fail "(a != b)" A8 "${ref}"

  avar=("a value"$'\n'"c" "b value") aref=("a value"$'\n'"c" "b value")
  zwrap::check_array A9 "avar" "aref"
  ztest::expect_ok "(a == b <newline>)" A9

  if (( BASH_VERSINFO[0] >= 4 )); then
    declare -A avar2=([first]='multi word' ['2nd'$'\n''item']='"with"!;exit"' \
			     [\'special\$aref\']="\"and \$var(2'\"" )
    declare -A aref2=([first]='multi word' ['2nd'$'\n''item']='"with"!;exit"' \
			     [\'special\$aref\']="\"and \$var('\"" )
    zwrap::check_array A11 "avar2" "aref2"
    ztest::read_var ref <<-"EOF"
	diff: <expected> <found>
	3c3
	< ['special$aref']='"and $var('"'
	---
	> ['special$aref']='"and $var(2'"'
	EOF
    ztest::expect_fail "(a != b)" A11 "${ref}"
  fi
}

ztest::check_file_tests() {
  local var='' ref

  ztest::prefix "shtest::check_file"

  ztest::rm "${ZTEST_TESTFILE}"
  var="error text"$'\n'"second line"
  echo "${var}" > "${ZTEST_TESTFILE}"

  zwrap::check_file F1 "${ZTEST_TESTFILE}" "${var}"
  ztest::expect_ok "(a == b)" F1

  zwrap::check_file F2 "${ZTEST_TESTFILE}" "diff content"
  ztest::read_var ref <<-EOF
	diff: <expected> <found>
	1c1,2
	< diff content
	---
	> error text
	> second line
	EOF
  ztest::expect_fail "(a != b)" F2 "${ref}"

  (zwrap::check_file) || :
  # skip backtrace
  ztest::expect_output \
    "(<empty filename>)" F3 \
    "FATAL: Usage: shtest::check_file <id> <filename> <contents> [ <desc> ]" 1

  zwrap::check_file F4 "nofile" ""
  ztest::expect_fail "(<no file>)" F4 "      reason: File \"nofile\" not found"

  command -p chmod a-r "${ZTEST_TESTFILE}"
  zwrap::check_file F5 "${ZTEST_TESTFILE}" ""
  ztest::expect_fail "(<read prot>)" F5 \
                     "      reason: File \"${ZTEST_TESTFILE}\" unreadable"
  ztest::rm "${ZTEST_TESTFILE}"
}

ztest::check_reg_files_tests() {
  local ref

  ztest::prefix "shtest::check_reg_files"

  # no files registered
  (zwrap::check_reg_files) || :
  ztest::expect_output \
    "(<no args>)" M1 \
    "FATAL: Usage: shtest::check_reg_files <id> <desc> [ <file#-contents>... ]" 1

  zwrap::check_reg_files M2
  ztest::expect_ok "(<no reg>)" M2

  # try dereg w/o reg
  shtest::dereg_file "${ZTEST_TESTFILE}"

  shtest::reg_file >"${ZTEST_OUTPUT}"
  ztest::expect_output "(<reg-empty>)" M3 ""

  # reg test file
  shtest::reg_file "${ZTEST_TESTFILE}"

  # populate file
  ztest::rm "${ZTEST_TESTFILE}"
  echo "test content" >"${ZTEST_TESTFILE}"

  # confirm ok
  zwrap::check_reg_files M4 "(<match 1>)" "test content"
  ztest::expect_ok "(<match 1>)" M4

  # confirm fail
  zwrap::check_reg_files M5 "(<miss 1>)" "test wrong"
  ztest::read_var ref <<-EOF
	    expected: 'test wrong'
	       found: 'test content'
	EOF
  ztest::expect_fail "(<miss 1>)" M5 "${ref}" "(<miss 1>) (reg 1)"

  # reg second file
  shtest::reg_file "${ZTEST_TESTFILE2}"

  # populate file
  ztest::rm "${ZTEST_TESTFILE2}"
  echo "test2 content" >"${ZTEST_TESTFILE2}"

  # confirm multi-ok
  zwrap::check_reg_files M6 "(<match 2>)" "test content" "test2 content"
  ztest::expect_ok "(<match 2>)" M6

  # confirm multi-fail
  zwrap::check_reg_files M7 "(<miss A>)" "test wrong" "test2 content"
  ztest::read_var ref <<-EOF
	    expected: 'test wrong'
	       found: 'test content'
	EOF
  ztest::expect_fail "(<miss A>)" M7 "${ref}" "(<miss A>) (reg 1)"

  zwrap::check_reg_files M8 "(<miss B>)" "test content" "test2 wrong"
  ztest::read_var ref <<-EOF
	    expected: 'test2 wrong'
	       found: 'test2 content'
	EOF
  ztest::expect_fail "(<miss B>)" M8 "${ref}" "(<miss B>) (reg 2)"

  zwrap::check_reg_files M88 "(<miss A+B>)" "test wrong" "test2 wrong"
  ztest::read_var ref <<-EOF
	    expected: 'test wrong'
	       found: 'test content'
	 M88  FAIL | (<miss A+B>) (reg 2)
	    expected: 'test2 wrong'
	       found: 'test2 content'
	EOF
  ztest::expect_fail "(<miss A+B>)" M88 "${ref}" "(<miss A+B>) (reg 1)"

  # missing test arg
  zwrap::check_reg_files M9 "(<short test>)" "test content"
  ztest::read_var ref <<-EOF
	    expected: ''
	       found: 'test2 content'
	EOF
  ztest::expect_fail "(<short test>)" M9 "${ref}" "(<short test>) (reg 2)"

  # remove reg
  shtest::dereg_file "${ZTEST_TESTFILE2}"

  # should ignore extra arg
  zwrap::check_reg_files M10 "(<dereg>)" "test content" "test2 wrong"
  ztest::expect_ok "(<dereg>)" M10

  # re-reg file
  shtest::reg_file "${ZTEST_TESTFILE2}"

  zwrap::check_reg_files M11 "(<re-reg>)" "test content" "test2 content"
  ztest::expect_ok "(<re-reg>)" M11

  shtest::reg_file >"${ZTEST_OUTPUT}"
  ztest::expect_output "(<reg-list>)" M12 \
                       "${ZTEST_TESTFILE}"$'\n'"${ZTEST_TESTFILE2}"
}

ztest::log_tests() {
  local out=''
  ztest::prefix "shtest::log"

  # check that stderr gets dup'd for log
  (shtest::cleanup
   shtest::reset
   shtest::log "test message"
   shtest::cleanup) 2>"${ZTEST_OUTPUT}"
  ztest::expect_output "()" I0 "test message"

  shtest::log 88>"${ZTEST_OUTPUT}" "test message"
  ztest::expect_output "()" I1 "test message"

  ztest::prefix "shtest::log_setfd"

  (shtest::log_setfd 88>"${ZTEST_OUTPUT}" "bogus") || :
  ztest::expect_output "(<badfd>)" I2 \
                       "FATAL: shtest::log_setfd: bad fd 'bogus'" 1

  (shtest::log_setfd 88>"${ZTEST_OUTPUT}" "-1") || :
  ztest::expect_output "(<badnum>)" I3 \
                       "FATAL: shtest::log_setfd: bad fd '-1'" 1

  out=$(shtest::log_setfd 88>"${ZTEST_OUTPUT}")
  ztest::expect_output "(<no args>)" I4 ""
  ztest::cmp_test "(<no args>)" I5 "88" "${out}"

  shtest::log_setfd 88>"${ZTEST_OUTPUT}" 2>&88 "2"
  ztest::expect_output "(2)" I6 ""

  ztest::prefix "shtest::log"

  out=$(shtest::log 2>"${ZTEST_OUTPUT}" 88>&1 "test message")
  ztest::expect_output "(<stderr>)" I7 "test message"
  ztest::cmp_test "(<stderr>)" I8 "" "${out}"

  ztest::prefix "shtest::log_setfd"

  out=$(shtest::log_setfd 2>"${ZTEST_OUTPUT}")
  ztest::expect_output "(<no args>)" I9 ""
  ztest::cmp_test "(<no args>)" I10 "2" "${out}"

  shtest::log_setfd 88>"${ZTEST_OUTPUT}" 2>&88 "0"
  ztest::expect_output "(0)" I11 ""

  ztest::prefix "shtest::log"

  out=$(shtest::log 88>"${ZTEST_OUTPUT}" 2>&1 "test message")
  ztest::expect_output "(<fd88>)" I12 "test message"
  ztest::cmp_test "(<fd88>)" I13 "" "${out}"

  ztest::prefix "shtest::log_setfd"

  out=$(shtest::log_setfd 88>"${ZTEST_OUTPUT}" 2>&1)
  ztest::expect_output "(<no args>)" I14 ""
  ztest::cmp_test "(<no args>)" I15 "88" "${out}"
}

ztest::misc_tests() {
  local out=''

  ztest::prefix "shtest::verbose"

  shtest::verbose

  :; zwrap::check_result L1 t "test desc"
  ztest::expect_ok "(<desc>)" L1 "test desc"

  :; zwrap::check_result L2 t
  ztest::expect_ok "(<no desc>)" L2

  shtest::verbose 0

  :; zwrap::check_result L3 t "test desc"
  ztest::expect_ok "(<desc>) - off" L3

  ztest::prefix "shtest::prefix"

  shtest::prefix "ztest prefix: "
  shtest::verbose

  :; zwrap::check_result L4 t "desc"
  ztest::expect_ok "(<prefix>)" L4 "ztest prefix: desc"

  shtest::prefix

  :; zwrap::check_result L5 t "desc"
  ztest::expect_ok "(<no prefix>)" L5 "desc"

  shtest::verbose 0

  ztest::prefix "shtest::quiet"

  shtest::quiet

  :; zwrap::check_result L6 f "desc"
  ztest::expect_output "(<quiet>)" L6 ""

  shtest::quiet 0

  :; zwrap::check_result L7 f "desc"
  ztest::expect_fail "(<quiet 0>)" L7 "" "desc" 1

  ztest::prefix "shtest::add_focus"

  shtest::add_focus "F*"

  :; zwrap::check_result L8 f "desc"
  ztest::expect_output "(<focus mismatch>)" L8 ""

  :; zwrap::check_result F9 f "desc"
  ztest::expect_fail "(<focus match>)" F9 "" "desc" 1

  ztest::prefix "shtest::alert"

  :; shtest::alert 88>"${ZTEST_OUTPUT}" "alert test"
  ztest::expect_output "(<with focus set>)" L10 "alert test"

  shtest::reset

  ztest::prefix "duplicate test"

  (:; zwrap::check_result XX t "desc"
   :; zwrap::check_result XX t "desc2") || :
  ztest::expect_output \
    "" D1 "FATAL: shtest::check_result: Duplicate test <id> 'XX'" 1

  ztest::prefix "shtest::last_check_ok"

  :; zwrap::check_result O1 t
  out="<false>"; shtest::last_check_ok && out="<true>"
  ztest::cmp_test "(<true>)" O1 "<true>" "${out}"

  false || zwrap::check_result O2 t
  out="<false>"; shtest::last_check_ok && out="<true>"
  ztest::cmp_test "(<false>)" O2 "<false>" "${out}"

  :; zwrap::check_result O3 t
  shtest::reset_state
  out="<false>"; shtest::last_check_ok && out="<true>"
  ztest::cmp_test "(<reset_state/false>)" O3 "<false>" "${out}"
}

ztest::onexit1() {
  shtest::alert "in exit1: ${1-}"
}

ztest::onexit2() {
  shtest::alert "in exit2: ${1-}"
}

ztest::onexit_tests() {
  local out='' ref
  ztest::prefix "shtest::add_onexit"

  out=$(shtest::log_setfd 1
        shtest::strict off
        shtest::add_onexit ztest::onexit1
        exit 0)
  ztest::cmp_test "(<1 onexit>)" T1 "in exit1: 0" "${out}"

  ztest::read_var out <<< "$(shtest::log_setfd 1
        shtest::strict off
        shtest::add_onexit ztest::onexit1
        shtest::add_onexit ztest::onexit2
        exit 1)" || :
  ztest::read_var ref <<-EOF
	in exit1: 1
	in exit2: 1
	EOF
  ztest::cmp_test "(<2 onexit>)" T2 "${ref}" "${out}"

  ztest::read_var out <<< "$(shtest::log_setfd 1
        shtest::strict off
        shtest::add_onexit ztest::onexit1
        shtest::add_onexit ztest::onexit2
        shtest::add_onexit
        shtest::cleanup)"
  ztest::read_var ref <<-EOF
	ztest::onexit1
	ztest::onexit2
	EOF
  ztest::cmp_test "(<no args>)" T3 "${ref}" "${out}"

  ztest::prefix "shtest::remove_onexit"

  ztest::read_var out <<< "$(shtest::log_setfd 1
        shtest::strict off
        shtest::add_onexit ztest::onexit1
        shtest::add_onexit ztest::onexit2
        shtest::remove_onexit ztest::onexit1)"
  ztest::cmp_test "(<1 removed, no exit>)" T11 "in exit2: 0" "${out}"

  ztest::read_var out <<< "$(shtest::log_setfd 1
        shtest::strict off
        shtest::add_onexit ztest::onexit1
        shtest::remove_onexit ztest::onexit1
        exit 0)"
  ztest::cmp_test "(<removed>)" T12 "" "${out}"

  ztest::prefix "shtest::trace"

  out=$(shtest::reset
        shtest::log_setfd 1
        shtest::trace on
        exit 0)
  ztest::cmp_test "(<exit trace>)" T21 "Unexpected exit 0"$'\n'"Back" \
                  "${out%%trace:*}"

  shtest::trace off

  out=$(shtest::reset
        shtest::log_setfd 1
        shtest::trace on
        shtest::trace off
        exit 1) || :
  ztest::cmp_test "(<exit trace off>)" T22 \
                  "Unexpected exit 1 (try trace for details)" "${out}"

  # remove any strict test failures
  shtest::reset_state
}

ztest::fail_strict() { # 1 - unset var, otherwise just calls false
  [[ ${1-} ]] && {
    local unset_var; unset unset_var
    echo "${unset_var}"
    return 0
  }
  false
  return 0
}

zwrap::fail_strict() {
  ztest::fail_strict 88>"${ZTEST_OUTPUT}"
}

ztest::strict_tests() {
  local out ref
  ztest::prefix "shtest::strict"

  shtest::strict

  ztest::read_var \
    out <<< "$(ztest::fail_strict 1 88>&1 2>&1; echo "err ignored")"
  ztest::cmp_test "(<unbound>)" S1 "unbound variable" "${out##*unset_var: }"

  ztest::read_var out <<< "$(shtest::strict trace
        shtest::log_setfd 1
        zwrap::fail_strict
        shtest::cleanup)"
  # skip backtrace details
  ztest::cmp_test "(trace)" S2 \
                  "Strict mode failure"$'\n'"Back" "${out%%trace:*}"

  shtest::strict notrace

  # check shtest::strict_failed
  ztest::read_var out <<< "$(shtest::log_setfd 1
        ztest::fail_strict
        shtest::strict_failed && echo "strict error"
        shtest::reset_state)"
  ztest::cmp_test "(notrace)" S3 \
                  "mode failure (try trace for details)"$'\n'"strict error" \
                  "${out##*Strict }"

  (zwrap::fail_strict
   zwrap::check_result S4 t "strict fail")
  ztest::expect_fail "(strict check)" S4 "      reason: strict mode failure" \
		     "strict fail"

  (zwrap::fail_strict
   shtest::reset_state
   zwrap::check_result S5 t "strict reset")
  ztest::expect_ok "(<strict-fail/reset_state>)" S5

  shtest::strict off

  # check shtest::strict_failed
  (zwrap::fail_strict
   shtest::strict_failed && echo "strict error">>"${ZTEST_OUTPUT}"
   shtest::reset_state)
  ztest::expect_output "(off)" S6 ""

  (zwrap::fail_strict
   zwrap::check_result S7 t)
  ztest::expect_ok "(off)" S7

  local exp_rc=1
  # old bash versions didn't pass 1 to exit traps on unbound :P
  (( BASH_VERSINFO[0] < 4 )) && exp_rc=0
  out=$(exec 2>&1
        shtest::reset
        shtest::log_setfd 1
        shtest::strict trace
        ztest::fail_strict 1) || :
  out=${out%%trace:*}
  ztest::read_var ref <<-EOF
	unbound variable
	Unexpected exit ${exp_rc}
	Back
	EOF
  ztest::cmp_test "(<unbound>)" S8 "${ref}" "${out##*unset_var: }"

  out=$(exec 2>&1
        shtest::reset
        shtest::log_setfd 1
        shtest::strict
        shtest::add_onexit ztest::onexit1
        ztest::fail_strict 1) || :
  ztest::read_var ref <<-EOF
	unbound variable
	Unexpected exit ${exp_rc} (try trace for details)
	in exit1: ${exp_rc}
	EOF
  ztest::cmp_test "(<add_onexit>)" S9 "${ref}" "${out##*unset_var: }"

  out=$(exec 2>&1
        shtest::reset
        shtest::log_setfd 1
        shtest::strict
        shtest::add_onexit ztest::onexit1
        shtest::remove_onexit ztest::onexit1
        ztest::fail_strict 1) || :
  ztest::read_var ref <<-EOF
	unbound variable
	Unexpected exit ${exp_rc} (try trace for details)
	EOF
  ztest::cmp_test "(<remove_onexit>)" S10 "${ref}" "${out##*unset_var: }"

  shtest::strict notrace

  ztest::prefix "shtest::whitelist"

  (shtest::whitelist ztest::fail_strict
   zwrap::fail_strict
   zwrap::check_result S11 t "strict fail")
  ztest::expect_ok "(<err ignored>)" S11

  # check whitelist cleared by check
  (shtest::whitelist ztest::fail_strict
   shtest::check_result S12c t 88>/dev/null
   zwrap::fail_strict
   zwrap::check_result S12 t "strict fail")
  ztest::expect_fail "(<whitelist/check>)" S12 \
		     "      reason: strict mode failure" "strict fail"

  # check whitelist cleared by reset_state
  (shtest::whitelist ztest::fail_strict
   shtest::reset_state
   zwrap::fail_strict
   zwrap::check_result S13 t "strict fail")
  ztest::expect_fail "(<whitelist/reset_state>)" S13 \
                     "      reason: strict mode failure" "strict fail"

  ztest::prefix "shtest::global_whitelist"

  (shtest::global_whitelist ztest::fail_strict
   zwrap::fail_strict
   zwrap::check_result S21 t "strict fail")
  ztest::expect_ok "(<err ignored>)" S21

  # now continue in notrace mode
  shtest::strict notrace
}

ztest::run_tests() { # [ strict ]

  local test_env

  shtest::save_env "test_env"

  [[ ${1-} == strict ]] && ztest::strict_tests

  ztest::fatal_tests

  ztest::log_tests

  ztest::prefix "shtest::title"

  shtest::title 88>"${ZTEST_OUTPUT}" "ztest title"
  ztest::expect_output "(<title>)" TT $'\n'"===== ztest title ====="$'\n'

  ztest::check_result_tests

  ztest::check_value_tests

  ztest::check_var_tests

  ztest::check_array_tests

  ztest::check_file_tests

  ztest::check_reg_files_tests

  ztest::onexit_tests

  ztest::misc_tests

  ztest::prefix "shtest::check_env"

  shtest::check_env 88>"${ZTEST_OUTPUT}" E1 "test_env"
  ztest::expect_ok "(<ok>)" E1

  local bogus_var=''
  shtest::check_env 88>"${ZTEST_OUTPUT}" E2 "test_env"
  ztest::expect_fail "(<fail>)" E2 "      reason: New variables: bogus_var"
}

ztest::save_ztest_env() {
  # save pre-reset env
  ZTEST_ENV=()
  ztest::read_arr ZTEST_ENV <<< "$(compgen -v)"
}

ztest::check_ztest_env() {
  local zname znewvars=() IFS; unset IFS
  for zname in $(compgen -v); do
    [[ ${ZTEST_ENV[*]} =~ (^| )${zname}($| ) ]] && continue
    [[ ${zname} =~ ^zname|znewvars$ ]] && continue
    [[ ${zname} =~ ^BASH_.*|LINES|COLUMNS$ ]] && continue
    znewvars+=("${zname}")
  done
  ztest::prefix "checking env"
  if [[ ${#znewvars[*]} -eq 0 ]]; then
    ztest::log_ok "" "ENV"
  else
    ztest::log_fail "" "ENV" "New variables: ${znewvars[*]}"
  fi
}

ztest::remove_files() { # <file>...
  local file
  for file in "$@"; do
    [[ ${file} && -f "${file}" ]] && ztest::rm "${file}"
  done
}

ztest::cleanup() {
  shtest::cleanup
  ztest::remove_files "${ZTEST_OUTPUT-}" "${ZTEST_TESTFILE-}" \
                      "${ZTEST_TESTFILE2-}"
}

ztest::handle_exit() { # <$?>
  # avoid any recursion...
  [[ ${ZTEST_EXITLVL-} ]] || return 0
  # only cleanup files if at toplevel
  if (( BASH_SUBSHELL <= ZTEST_EXITLVL )); then
    # display contents of error file, then remove it
    if [[ ${ZTEST_OUTPUT-} && -f "${ZTEST_OUTPUT}" ]]; then
      ztest::err "=== Error file contents ==="
      printf >&2 '%s' "$(< "${ZTEST_OUTPUT}")"
    fi
    ztest::cleanup
  fi
  ZTEST_EXITLVL=''
}

trap 'ztest::handle_exit $?' EXIT

ZTEST_OUTPUT=$(ztest::mktemp -u -t "ztest-log-XXXXXX") || :
[[ ${ZTEST_OUTPUT} ]] ||
  shtest::fail "Unable to create log tmpfile"
ZTEST_TESTFILE=$(ztest::mktemp -u -t "ztest-test-XXXXXX") || :
[[ ${ZTEST_TESTFILE} ]] ||
  shtest::fail "Unable to create test tmpfile"
ZTEST_TESTFILE2=$(ztest::mktemp -u -t "ztest-test-XXXXXX") || :
[[ ${ZTEST_TESTFILE2} ]] ||
  shtest::fail "Unable to create test tmpfile"

printf '\n%s\n\n' "==== Run in normal mode ===="
ztest::run_tests

shtest::cleanup

if [[ ${ZTEST_FAILED} -eq 0 ]]; then
  printf '\n%s\n\n' "==== Re-run in strict mode ===="
  ZTEST_COUNT=0 ZTEST_LIST=() IFS=-

  # cleanup and save environment
  ztest::save_ztest_env

  # reset shtest, and re-run with strict enabled
  shtest::reset
  ztest::run_tests strict

  [[ ${IFS} == "-" ]]
  zwrap::check_result IFS t "checking IFS"
  ztest::expect_ok "(IFS == -)" IFS

  # now cleanup and check for stray variables
  shtest::cleanup
  ztest::check_ztest_env
fi

ZTEST_TRAP=''
[[ $(trap -p EXIT) =~ trap\ --\ \'([^\047]*)\'.* ]] &&
  ZTEST_TRAP=${BASH_REMATCH[1]}
ztest::cmp_test "(trap restored)" FT 'ztest::handle_exit $?' "${ZTEST_TRAP}"

printf '\n%s\n\n' "==== FINAL REPORT ===="
echo "     TESTS RUN: ${ZTEST_COUNT}"
echo "  TESTS PASSED: $(( ZTEST_COUNT - ZTEST_FAILED ))"
[[ ${ZTEST_FAILED} -ne 0 ]] && echo "   TEST FAILED: ${ZTEST_FAILED}"
echo

ztest::cleanup

exit 0
